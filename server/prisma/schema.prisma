generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis(version: "3.1.7")]
}

model User {
  id          String                               @id @default(uuid())
  firstName   String
  username    String?                              @unique
  email       String
  googleId    String                               @unique
  lastName    String?
  picture     String?
  token       String?
  location    Unsupported("\"public\".geography")?
  clubMembers ClubMembers?
  Discussions Discussions[]
  Posts       Posts[]
  books       UserBooks[]
}

model Books {
  id          String      @id @default(uuid())
  title       String
  author      String
  description String?
  paperback   Boolean?
  content     String?
  image       String?
  ISBN10      String      @unique
  genre       Genre[]
  UserBooks   UserBooks[]
}

model Genre {
  id      String  @id @default(uuid())
  booksId String?
  name    String
  books   Books?  @relation(fields: [booksId], references: [id])
}

model UserBooks {
  id        String  @id @default(uuid())
  wishlist  Boolean @default(false)
  owned     Boolean @default(false)
  booksId   String
  userId    String
  rating    Float?
  thumbDown Int?
  thumbUp   Int?
  books     Books   @relation(fields: [booksId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  @@unique([userId, booksId], name: "userId_bookId")
}

model bookdata {
  asin       String
  author     String
  image_url  String
  rating     String
  title      String
  url        String
  categories String
  ISBN10     Int    @id
}

model Clubs {
  id          String        @id @default(uuid())
  name        String
  clubMembers ClubMembers?
  Discussions Discussions[]
}

model ClubMembers {
  id     String @id @default(uuid())
  userId String @unique
  clubId String @unique
  club   Clubs  @relation(fields: [clubId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
}

model Discussions {
  id      String  @id @default(uuid())
  userId  String
  title   String
  clubsId String
  clubs   Clubs   @relation(fields: [clubsId], references: [id])
  creator User    @relation(fields: [userId], references: [id])
  Posts   Posts[]
}

model Posts {
  id            String      @id @default(uuid())
  userId        String
  body          String
  discussionsId String
  discussion    Discussions @relation(fields: [discussionsId], references: [id])
  user          User        @relation(fields: [userId], references: [id])
}

model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)
}

model us_gaz {
  id        Int     @id(map: "pk_us_gaz") @default(autoincrement())
  seq       Int?
  word      String?
  stdword   String?
  token     Int?
  is_custom Boolean @default(true)
}

model us_lex {
  id        Int     @id(map: "pk_us_lex") @default(autoincrement())
  seq       Int?
  word      String?
  stdword   String?
  token     Int?
  is_custom Boolean @default(true)
}

model us_rules {
  id        Int     @id(map: "pk_us_rules") @default(autoincrement())
  rule      String?
  is_custom Boolean @default(true)
}
